---

---
<script>
  import { createChart } from 'lightweight-charts';

  class wartChart extends HTMLElement {
    constructor() {
      super();
      this.refreshInterval = 60000;
      this.timer = null;
      this.chart = null;
      this.candlestickSeries = null;
      this.areaSeries = null;
      this.candlesOn = false;
    }
    
    async connectedCallback() {
        const container = document.getElementById("realChart"); 

        const chartOptions = { 
          width: container.clientWidth,
          height: container.clientHeight,
          layout: { 
            textColor: 'white', 
            background: { type: 'solid', color: 'black' }
          },
          grid: {
            vertLines: {
              color: 'transparent'
            },
            horzLines: {
              color: 'transparent'
            }
          }
        };

        this.chart = createChart(container, chartOptions);
        this.areaSeries = this.chart.addAreaSeries({
            lastValueVisible: false, // hide the last value marker for this series
            crosshairMarkerVisible: false, // hide the crosshair marker for this series
            lineColor: 'rgba(0, 128, 0, 1)', // hide the line
            topColor: 'rgba(0, 128, 0, 0.8)',
            bottomColor: 'rgba(0, 128, 0, 0.1)',
          });
        this.candlestickSeries = this.chart.addCandlestickSeries({ 
            upColor: '#26a69a', 
            downColor: '#ef5350', 
            borderVisible: false, 
            wickUpColor: '#26a69a', 
            wickDownColor: '#ef5350',
            visible: false 
          });
        

        const chartData = await this.fetchInitialChartData();
        const remappedData = chartData.bars.map(({ open, high, low, close, time}) => ({open, high, low, close, time: time / 1000}));
        const remappedAreaData = chartData.bars.map(datapoint => ({
            time: datapoint.time / 1000,
            value: (datapoint.close + datapoint.open) / 2,
        }));

        console.log(remappedData);
        console.log(remappedAreaData);
        

        this.candlestickSeries.setData(remappedData);
        this.areaSeries.setData(remappedAreaData);
        
        this.chart.timeScale().fitContent(); 

        document.getElementById("toggleChart").addEventListener('click', () => this.ToggleCharts())
        
        window.addEventListener('resize', () => {
            this.chart.resize(container.clientWidth, container.clientHeight);
        })
      }

      ToggleCharts() {
          if (this.candlesOn) {
            this.candlestickSeries.applyOptions({
              visible: false
            });
            this.areaSeries.applyOptions({
              lineColor: 'rgba(0, 128, 0, 1)',
              visible: true
            });
          }else{
            this.areaSeries.applyOptions({
              lineColor: 'transparent',
              visible: false
            });
            this.candlestickSeries.applyOptions({
              visible: true
            });
          }
          this.candlesOn = !this.candlesOn;
      }

      async fetchInitialChartData() {
        const now = Date.now();
        const fourWeeksAgo = now - 2419200000;
        let data;

        const url = 'https://api.xeggex.com/api/v2/market/candles?symbol=wart_usdt&resolution=1440&countBack=28&firstDataRequest=1';
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          data = await response.json();
          return data
                    
        } catch (error) {
          console.error('Error fetching market data:', error);
          data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];
        }

        return data;
      }
    }

    customElements.define('wart-chart', wartChart);

    
</script>
<script>
  class MarketDataComponent extends HTMLElement {
    constructor() {
      super();
      this.refreshInterval = 60000;
      this.timer = null;
    }

    connectedCallback() {
      this.fetchMarketData();
      this.startTimer();
    }

    disconnectedCallback() {
      clearInterval(this.timer);
    }

    async fetchMarketData() {
        const url = 'https://api.xeggex.com/api/v2/market/getbysymbol/wart_usdt';
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          const data = await response.json();
          
          this.DisplayMinedInfo(data);

          document.getElementById('symbol').textContent = data.symbol;
          document.getElementById('price').textContent = '$' + data.lastPrice;
          document.getElementById('updated').textContent = new Date().toLocaleTimeString();
          document.getElementById('marketCap').textContent = '$' + data.marketcapNumber.toLocaleString();
        } catch (error) {
          console.error('Error fetching market data:', error);
          document.getElementById('symbol').textContent = 'Error';
          document.getElementById('price').textContent = 'N/A';
          document.getElementById('updated').textContent = 'Error fetching data';
        }
      }

    startTimer() {
      let countdown = this.refreshInterval / 1000;
      this.timer = setInterval(() => {
        countdown--;
        document.getElementById('countdown').textContent = `Next update in: ${countdown} seconds`;
        if (countdown <= 0) {
          countdown = this.refreshInterval / 1000;
          this.fetchMarketData();
        }
      }, 1000);
    }

    DisplayMinedInfo(apiData) {
      const maxSupply = 18921600
      const circulatingSupply = parseInt(apiData.primaryCirculation);
      const percentage = ((circulatingSupply / maxSupply) * 100)/2;
      
      const minedPath = document.getElementById('mined');
      minedPath.style.strokeDasharray = `${percentage}, 100`;
      document.getElementById('circulatingWart').textContent = circulatingSupply.toLocaleString('en-US') + ' WART';
    }
  }

  customElements.define('market-data', MarketDataComponent);
</script>

<market-data class="w-9/12">
  <div>
    <wart-chart class="relative">
      <button id="toggleChart" class="block ml-auto mb-4 mr-4 bg-black text-white border border-gray-300 rounded-lg px-4 py-2">Candle/Line</button> 
      <div id = "realChart" class="wartChart flex justify-between items-center bg-black"/>
      <div class="flex justify-center space-x-64 mt-4">
        <button class="bg-black text-white border border-gray-300 rounded-lg px-4 py-2">1 Day</button>
        <button class="bg-black text-white border border-gray-300 rounded-lg px-4 py-2">5 Days</button>
        <button class="bg-black text-white border border-gray-300 rounded-lg px-4 py-2">1 Month</button>
        <button class="bg-black text-white border border-gray-300 rounded-lg px-4 py-2">6 Months</button>
      </div>
      
    </wart-chart>
    <section class="ml-6 mr-6 flex justify-between items-center bg-gray-500 rounded-b-lg p-4">
  
      <div class="ml-6 mr-4">
        <img class="logo" src="/Images/Warthog_2024_Full Logo.svg" alt="logo"/>
        <div class="">
          <h2><span id="symbol">Loading...</span></h2>
        </div>
        
      </div>
      <div class="ml-4 mr-4">
          <p>Xeggex.com - Price: <span id="price">Loading...</span></p>
          <p>MarketCap: <span id="marketCap">Not yet updated</span></p>
          <p>Last updated: <span id="updated">Not yet updated</span></p>
          <small class="small" id="countdown"></small>
        </div>
      <div class="ml-4 mr-6">
        <div class="relative w-42 h-32">
          <div class="absolute inset-0 flex flex-col items-center justify-center">
              <span class="text-1xl font-bold text-black mt-8">MINED</span>
              <span id="circulatingWart" class="block text-sm font-medium text-black-500"></span>
              <span class="block text-sm font-bold text-black-500">Total Supply</span>
              <span class="block text-sm font-medium text-black-500">18,921,600</span>
          </div>
          <svg class="w-full h-full" viewBox="0 0 36 20">
              <path id="whole" class="text-gray-600 stroke-current" stroke-dasharray="75, 100" stroke-width="1" fill="none"
                  d="M2.0845 18 
                    a 15.9155 15.9155 0 1 1 31.831 0" />
              <path id="mined" class="text-yellow-600 stroke-current" stroke-dasharray="75, 100" stroke-width="4" fill="none"
                    d="M2.0845 18 
                    a 15.9155 15.9155 0 1 1 31.831 0" />
          </svg>
        </div>
      </div>
    </section>
  </div>
 
  
</market-data>