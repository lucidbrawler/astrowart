---
import warthogShape from "../BalkyImages/warthogShape.svg"
---
<script>

import { createChart } from 'lightweight-charts';

  class wartChart extends HTMLElement {
    constructor() {
      super();
      this.refreshInterval = 60000;
      this.timer = null;
      this.chart = null;
      this.candlestickSeries = null;
      this.areaSeries = null;
      this.candlesOn = false;
      this.cachedData = new Map();
      this.LoadCachedDataFromLocalStorage()
    }
    
    async connectedCallback() {
        const container = document.getElementById("realChart"); 

        const chartOptions = { 
          width: container.clientWidth,
          height: container.clientHeight,
          layout: { 
            textColor: 'white', 
            background: { type: 'solid', color: 'black' }
          },
          grid: {
            vertLines: {
              color: 'transparent'
            },
            horzLines: {
              color: 'transparent'
            }
          },
          timeScale: {
            timeVisible: true
          }
        };

        this.chart = createChart(container, chartOptions);
        this.areaSeries = this.chart.addAreaSeries({
            lastValueVisible: false, // hide the last value marker for this series
            crosshairMarkerVisible: false, // hide the crosshair marker for this series
            lineColor: 'rgba(0, 128, 0, 1)', // hide the line
            topColor: 'rgba(0, 128, 0, 0.8)',
            bottomColor: 'rgba(0, 128, 0, 0.1)',
          });
        this.candlestickSeries = this.chart.addCandlestickSeries({ 
            upColor: '#26a69a', 
            downColor: '#ef5350', 
            borderVisible: false, 
            wickUpColor: '#26a69a', 
            wickDownColor: '#ef5350',
            visible: false 
          });
        
        
        const sixMoButton = document.getElementById('6moChart');
        await this.GetSixMonthChartData(sixMoButton);


        document.getElementById("toggleChart").addEventListener('click', () => this.ToggleCharts());
        document.getElementById("6moChart").addEventListener('click', (event) => this.GetSixMonthChartData(event.target));
        document.getElementById("1moChart").addEventListener('click', (event) => this.GetOneMonthChartData(event.target));
        document.getElementById("5dayChart").addEventListener('click', (event) => this.GetFiveDayChartData(event.target));
        document.getElementById("1dayChart").addEventListener('click', (event) => this.GetOneDayChartData(event.target));

        window.addEventListener('resize', () => {
            this.chart.resize(container.clientWidth, container.clientHeight);
        })
      }

      ToggleCharts() {
          if (this.candlesOn) {
            this.candlestickSeries.applyOptions({
              visible: false
            });
            this.areaSeries.applyOptions({
              lineColor: 'rgba(0, 128, 0, 1)',
              visible: true
            });
          }else{
            this.areaSeries.applyOptions({
              lineColor: 'transparent',
              visible: false
            });
            this.candlestickSeries.applyOptions({
              visible: true
            });
          }
          this.candlesOn = !this.candlesOn;
      }

      async fetchChartData(countBack, dataResolutionInMinutes) {
        let data;
        const keyName = this.CachedDataKey(countBack, dataResolutionInMinutes);
        //console.log(keyName);

        if (this.cachedData.has(keyName) && this.CachedDataNotOld(this.cachedData.get(keyName), dataResolutionInMinutes)) {
          data = this.cachedData.get(keyName);
          //console.log("It was cached");
        }else{
          const url = 'https://api.xeggex.com/api/v2/market/candles?symbol=wart_usdt&resolution=' + dataResolutionInMinutes.toString() + '&countBack=' + countBack.toString() + '&firstDataRequest=1';
          try {
            const response = await fetch(url);
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            data = await response.json();
            //data.chartChange = this.CalculateChartDataChange(data);
            this.cachedData.set(keyName, data)
            this.SaveCachedDataToLocalStorage(this.cachedData);
            //console.log("Queried and saved to cache");
          } catch (error) {
            console.error('Error fetching market data:', error);
            data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];
          }
        }
        
        const remappedData = data.bars.map(({ open, high, low, close, time}) => ({open, high, low, close, time: time / 1000}));
        const remappedAreaData = data.bars.map(datapoint => ({
            time: datapoint.time / 1000,
            value: (datapoint.close + datapoint.open) / 2,
        }));

        console.log(remappedData);
        console.log(remappedAreaData);

        this.candlestickSeries.setData(remappedData);
        this.areaSeries.setData(remappedAreaData);
        
        this.chart.timeScale().fitContent(); 
      }

      CachedDataKey(cb, drm) {
        return cb.toString() + ":" + drm.toString();
      }

      CachedDataNotOld(data, updateFrequencyInMin) {
        const dateNow = Date.now();
        //console.log(data);
        const lastUpdate = data.bars[data.bars.length - 1].time;
        const dateDiff = dateNow - lastUpdate; 
        if (dateDiff < (1000 * 60 * updateFrequencyInMin)) {
          //console.log("Cached data is still new");
          return true;
        }
        //console.log("Cached data is old, time to replace it.")
        return false;
      }

      //CalculateChartDataChange(data) {
      //  if ("bars" in data && data.bars.length > 1) {
      //    const firstValue = data.bars[0].open;
      //    const lastValue = data.bars[data.bars.length - 1].close;
      //    const percentageDiff = ((lastValue - firstValue) / firstValue) * 100;

      //    return percentageDiff.toFixed(2);
      // }
      //  return 0.00;
      //}

      SaveCachedDataToLocalStorage(dataMap) {
        const obj = Object.fromEntries(dataMap);
        const dataObj = {
          mapData: obj,
          timestamp: Date.now()
        };

        localStorage.setItem("WarthogCharts", JSON.stringify(dataObj));
        //console.log("Saved to localstorage");
      }

      LoadCachedDataFromLocalStorage() {
        const storedData = JSON.parse(localStorage.getItem("WarthogCharts"));

        if (storedData) {
          const currentTime = Date.now();
          const oneDayMs = 86400000;
          if ("timestamp" in storedData && "mapData" in storedData) {
            if (currentTime - storedData.timestamp < oneDayMs) {
              this.cachedData = new Map(Object.entries(storedData.mapData));
              //console.log("Loaded from localstorage");
            }
          }
        }
      }

      async GetSixMonthChartData(button = null) {
        const today = new Date();

        const sixMonthsAgo = new Date();
        sixMonthsAgo.setMonth(today.getMonth() - 6);
        const diffInMillisec = today - sixMonthsAgo;

        const diffInDays = Math.floor(diffInMillisec / (1000 * 60 * 60 * 24));

        await this.fetchChartData(diffInDays, 1440);

        if (button) {
          this.ClearButtonHighlights();
          button.classList.add("chartSelected");
        }
      }

      async GetOneMonthChartData(button = null) {
        const today = new Date();

        const oneMonthsAgo = new Date();
        oneMonthsAgo.setMonth(today.getMonth() - 1);
        const diffInMillisec = today - oneMonthsAgo;

        const diffInDays = Math.floor(diffInMillisec / (1000 * 60 * 60 * 24));

        await this.fetchChartData(diffInDays, 1440);

        if (button) {
          this.ClearButtonHighlights();
          button.classList.add("chartSelected");
        }
      }

      async GetFiveDayChartData(button = null) {
        //with resolution of 60mins at 5 days we want 24hrs * 5 days = countBack 120 data points
        await this.fetchChartData(120, 60);

        if (button) {
          this.ClearButtonHighlights();
          button.classList.add("chartSelected");
        }
      }

      async GetOneDayChartData(button = null) {
        //with resolution of 30mins at 1 day we want to countBack 48 data points
        await this.fetchChartData(48, 30);

        if (button) {
          this.ClearButtonHighlights();
          button.classList.add("chartSelected");
        }
      }

      ClearButtonHighlights() {
        const buttons = document.querySelectorAll(".GetChartFunction");

        buttons.forEach((btn) => {
          btn.classList.remove("chartSelected");
        });
      }
    }

    customElements.define('wart-chart', wartChart);

    
</script>
<script>
  class MarketDataComponent extends HTMLElement {
    constructor() {
      super();
      this.refreshInterval = 60000;
      this.timer = null;
    }

    connectedCallback() {
      this.fetchMarketData();
      this.startTimer();
    }

    disconnectedCallback() {
      clearInterval(this.timer);
    }

    async fetchMarketData() {
        const url = 'https://api.xeggex.com/api/v2/market/getbysymbol/wart_usdt';
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          const data = await response.json();
          
          this.DisplayMinedInfo(data);

          document.getElementById('symbol').textContent = data.symbol;
          document.getElementById('price').textContent = '$' + data.lastPrice;
          document.getElementById('updated').textContent = new Date().toLocaleTimeString();
          document.getElementById('marketCap').textContent = '$' + data.marketcapNumber.toLocaleString();
        } catch (error) {
          console.error('Error fetching market data:', error);
          document.getElementById('symbol').textContent = 'Error';
          document.getElementById('price').textContent = 'N/A';
          document.getElementById('updated').textContent = 'Error fetching data';
        }
      }

    startTimer() {
      let countdown = this.refreshInterval / 1000;
      this.timer = setInterval(() => {
        countdown--;
        document.getElementById('countdown').textContent = `${countdown} seconds`;
        if (countdown <= 0) {
          countdown = this.refreshInterval / 1000;
          this.fetchMarketData();
        }
      }, 1000);
    }

    DisplayMinedInfo(apiData) {
      const maxSupply = 18921600
      const circulatingSupply = parseInt(apiData.primaryCirculation);
      const percentage = ((circulatingSupply / maxSupply) * 100);
      
      const progressBar = document.querySelector(".progress-bar");
      const progressLine = document.querySelector(".progress-line");
      const totalSupply = document.querySelector(".totalSupply");
      const progressPercentage = document.querySelector(".progress-percentage");
      const progressCirculatingSupply = document.querySelector(".progress-circulatingSupply");
      const nextHavingLine = document.querySelector(".nextHaving-line");

      progressBar.style.width = percentage + '%';
      progressLine.style.right = (100 - percentage) + '%'
      nextHavingLine.style.right = '50%';
      totalSupply.textContent = maxSupply.toLocaleString();
      progressPercentage.textContent = percentage.toFixed(2).toString() + '%';
      progressCirculatingSupply.textContent = circulatingSupply.toLocaleString();
    }
  }

  customElements.define('market-data', MarketDataComponent);
</script>

<market-data class="sm:w-full md:w-9/12 h-128">
  <div>
    <wart-chart class="relative">
      <button id="toggleChart" class="block ml-auto mb-4 mr-4 bg-black text-white text-xs border border-gray-300 rounded-lg px-4 py-2">Candle/Line</button> 
      <div id = "realChart" class="wartChart flex justify-between items-center bg-black"/>
      <div class="flex md:flex-row sm:flex-col justify-center mt-4">
        <div>
          <button id="1dayChart" class="GetChartFunction bg-black text-white mx-6 rounded-lg px-4 py-2 md:w-auto ">1 Day</button>
          <button id="5dayChart" class="GetChartFunction bg-black text-white mx-6 rounded-lg px-4 py-2 md:w-auto ">5 Days</button>
        </div>
        <div>
          <button id="1moChart" class="GetChartFunction bg-black text-white mx-6 rounded-lg px-4 py-2 md:w-auto ">1 Month</button>
          <button id="6moChart" class="GetChartFunction bg-black text-white mx-6 rounded-lg px-4 py-2 md:w-auto ">6 Months</button>
        </div>
        
        
      </div>
      
    </wart-chart>
    <section class="md:ml-6 md:mr-6 flex md:flex-row flex-col md:justify-between md:items-center p-4">
  
      <div class="mr-4 h-48 md:w-auto sm:w-full">
          <div class="text-white text-xl font-bold mb-4" id="symbol">Loading...</div>
          <p class="text-white">Xeggex.com: <span id="price">Loading...</span></p>
          <p class="text-white">MarketCap: <span id="marketCap">Not yet updated</span></p>
          <p class="text-white">Last updated: <span id="updated">Not yet updated</span></p>
          <span class="text-xs text-white pt-4">Next update in: </span><div class="inline-block text-xs text-black mt-4 ml-2 p-2 rounded-md bg-gray-200" id="countdown"></div>
      </div>

      <div class="relative md:w-2/3 sm:w-full h-48 bg-black md:p-2 flex md:items-center">
        <div class="absolute top-0 left-0 text-xl font-bold text-white">MINED</div>
        <div class="relative w-full top-28 md:top-8 h-6 bg-gray-300 rounded-l-sm">
          <div class="relative progress-bar h-full bg-yellow-400 rounded-l-sm">
            <img class="absolute right-1" src={warthogShape.src}/>
          </div>
          <div class="progress-line absolute right-0 top-[-70px] w-[2px] h-[70px] bg-yellow-400">
            <div class="progress-percentage absolute right-0 mr-2 text-yellow-400 font-bold text-xl">%</div>
            <div class="progress-circulatingSupply absolute right-0 mr-2 top-6 text-white text-md">0</div>
          </div>
          <div class="nextHaving-line absolute right-0 top-[-70px] w-[2px] h-[70px] bg-green-400">
            <div class="absolute left-0 ml-2 text-md font-bold text-green-400">Next Halving</div>
          </div>
          <div class="text-right">
            <div class="inline-block text-md text-white">Total:</div>
            <div class="inline-block totalSupply font-bold text-md text-white"></div>
          </div>
        </div>
        
      </div>
    </section>
  </div>
 
  
</market-data>