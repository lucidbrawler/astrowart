---
const { inset, height, backgroundTailwind, scrollSpeed = "1" } = Astro.props;
---

<script>
    import { gsap } from "gsap";
    import ScrollTrigger from "gsap/ScrollTrigger";
    gsap.registerPlugin(ScrollTrigger);

    class ParallaxEffect extends HTMLElement {
        constructor() {
            super();
            this.gsapInstance = null;
        }
        connectedCallback() {
            this.UpdateViewportHeight()
            window.addEventListener('resize', () => this.UpdateViewportHeight());
            const scrollSpeed = this.dataset.scrollspeed;
            const parallaxBG = this.querySelector(".parallax-bg");
                        
            this.gsapInstance = gsap.to(parallaxBG, {
                backgroundPositionY: () => this.CalculateBackgroundPositionY(),
                scrollTrigger: {
                    trigger: this,
                    start: "top bottom", //Try top 80% to start the trigger early
                    end: "bottom top",
                    scrub: true,
                    markers: false,
                    invalidateOnRefresh: true
                    //Look into testing these additional properties
                    //anticipation: 1, //used to make the start and end transitions smoother
                    //invalidateOnRefresh: true, makes GSAP recalculate on resize of window
                    //pin: true //pins section to smooth out animation
                },
                duration: scrollSpeed,
                //Could try adding ease: "power1.inOut" as another method to smooth
            });  
        
           
        }
        UpdateViewportHeight() {
            ScrollTrigger.refresh();
            //console.log('updated viewport height ' + this.viewportHeight + ' calc to: ' + this.CalculateBackgroundPositionY());
        }

        CalculateBackgroundPositionY() {
            const value = Math.round(window.innerHeight * 1.335); //1.521
            //console.log(`calculated value: ${value}`);
            return `${value}px`;
        }
        disconnectedCallback() {
            window.removeEventListener('resize', this.UpdateViewportHeight.bind(this));
        }
    }

    customElements.define('parallax-effect', ParallaxEffect)
</script>

<parallax-effect data-scrollSpeed={scrollSpeed}>
    <section class={`${height} relative parallax-bg bg-cover bg-center ${backgroundTailwind}`}>
        <div class={`absolute ${inset} flex items-center justify-center`}>
            <slot />
        </div>
    </section>
</parallax-effect>
